// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfs_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nfs_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nfs {

namespace {

const ::google::protobuf::Descriptor* CData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Filelist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Filelist_reflection_ = NULL;
const ::google::protobuf::Descriptor* Buffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Buffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nfs_5fdata_2eproto() {
  protobuf_AddDesc_nfs_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nfs_data.proto");
  GOOGLE_CHECK(file != NULL);
  CData_descriptor_ = file->message_type(0);
  static const int CData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, frompath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, topath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, buf_),
  };
  CData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CData_descriptor_,
      CData::default_instance_,
      CData_offsets_,
      -1,
      -1,
      -1,
      sizeof(CData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CData, _is_default_instance_));
  Stat_descriptor_ = file->message_type(1);
  static const int Stat_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, ino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, nlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, blksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, res_),
  };
  Stat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stat_descriptor_,
      Stat::default_instance_,
      Stat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _is_default_instance_));
  Filelist_descriptor_ = file->message_type(2);
  static const int Filelist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filelist, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filelist, res_),
  };
  Filelist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Filelist_descriptor_,
      Filelist::default_instance_,
      Filelist_offsets_,
      -1,
      -1,
      -1,
      sizeof(Filelist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filelist, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filelist, _is_default_instance_));
  Buffer_descriptor_ = file->message_type(3);
  static const int Buffer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buffer, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buffer, res_),
  };
  Buffer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Buffer_descriptor_,
      Buffer::default_instance_,
      Buffer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Buffer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buffer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buffer, _is_default_instance_));
  Result_descriptor_ = file->message_type(4);
  static const int Result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, res_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      -1,
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nfs_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CData_descriptor_, &CData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stat_descriptor_, &Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Filelist_descriptor_, &Filelist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Buffer_descriptor_, &Buffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nfs_5fdata_2eproto() {
  delete CData::default_instance_;
  delete CData_reflection_;
  delete Stat::default_instance_;
  delete Stat_reflection_;
  delete Filelist::default_instance_;
  delete Filelist_reflection_;
  delete Buffer::default_instance_;
  delete Buffer_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_nfs_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016nfs_data.proto\022\003nfs\"\320\001\n\005CData\022\014\n\004call\030"
    "\001 \001(\003\022\014\n\004path\030\002 \001(\t\022\014\n\004mask\030\003 \001(\003\022\014\n\004siz"
    "e\030\004 \001(\003\022\016\n\006offset\030\005 \001(\003\022\014\n\004mode\030\006 \001(\003\022\014\n"
    "\004rdev\030\007 \001(\003\022\013\n\003uid\030\010 \001(\003\022\013\n\003gid\030\t \001(\003\022\r\n"
    "\005flags\030\n \001(\003\022\020\n\010frompath\030\013 \001(\t\022\016\n\006topath"
    "\030\014 \001(\t\022\013\n\003res\030\r \001(\003\022\013\n\003buf\030\016 \001(\t\"\316\001\n\004Sta"
    "t\022\013\n\003dev\030\001 \001(\003\022\013\n\003ino\030\002 \001(\003\022\014\n\004mode\030\003 \001("
    "\003\022\r\n\005nlink\030\004 \001(\003\022\013\n\003uid\030\005 \001(\003\022\013\n\003gid\030\006 \001"
    "(\003\022\014\n\004rdev\030\007 \001(\003\022\014\n\004size\030\010 \001(\003\022\017\n\007blksiz"
    "e\030\t \001(\003\022\016\n\006blocks\030\n \001(\003\022\r\n\005mtime\030\013 \001(\003\022\r"
    "\n\005ctime\030\014 \001(\003\022\r\n\005atime\030\r \001(\003\022\013\n\003res\030\016 \001("
    "\003\")\n\010Filelist\022\020\n\010filename\030\001 \003(\t\022\013\n\003res\030\016"
    " \001(\003\"\"\n\006Buffer\022\013\n\003buf\030\001 \001(\t\022\013\n\003res\030\016 \001(\003"
    "\"\025\n\006Result\022\013\n\003res\030\001 \001(\003b\006proto3", 551);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nfs_data.proto", &protobuf_RegisterTypes);
  CData::default_instance_ = new CData();
  Stat::default_instance_ = new Stat();
  Filelist::default_instance_ = new Filelist();
  Buffer::default_instance_ = new Buffer();
  Result::default_instance_ = new Result();
  CData::default_instance_->InitAsDefaultInstance();
  Stat::default_instance_->InitAsDefaultInstance();
  Filelist::default_instance_->InitAsDefaultInstance();
  Buffer::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nfs_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nfs_5fdata_2eproto {
  StaticDescriptorInitializer_nfs_5fdata_2eproto() {
    protobuf_AddDesc_nfs_5fdata_2eproto();
  }
} static_descriptor_initializer_nfs_5fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CData::kCallFieldNumber;
const int CData::kPathFieldNumber;
const int CData::kMaskFieldNumber;
const int CData::kSizeFieldNumber;
const int CData::kOffsetFieldNumber;
const int CData::kModeFieldNumber;
const int CData::kRdevFieldNumber;
const int CData::kUidFieldNumber;
const int CData::kGidFieldNumber;
const int CData::kFlagsFieldNumber;
const int CData::kFrompathFieldNumber;
const int CData::kTopathFieldNumber;
const int CData::kResFieldNumber;
const int CData::kBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CData::CData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.CData)
}

void CData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CData::CData(const CData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.CData)
}

void CData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  call_ = GOOGLE_LONGLONG(0);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  mode_ = GOOGLE_LONGLONG(0);
  rdev_ = GOOGLE_LONGLONG(0);
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = GOOGLE_LONGLONG(0);
  flags_ = GOOGLE_LONGLONG(0);
  frompath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = GOOGLE_LONGLONG(0);
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CData::~CData() {
  // @@protoc_insertion_point(destructor:nfs.CData)
  SharedDtor();
}

void CData::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frompath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CData_descriptor_;
}

const CData& CData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_5fdata_2eproto();
  return *default_instance_;
}

CData* CData::default_instance_ = NULL;

CData* CData::New(::google::protobuf::Arena* arena) const {
  CData* n = new CData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CData::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.CData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mask_, uid_);
  call_ = GOOGLE_LONGLONG(0);
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(gid_, flags_);
  frompath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = GOOGLE_LONGLONG(0);
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.CData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 call = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &call_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.CData.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mask;
        break;
      }

      // optional int64 mask = 3;
      case 3: {
        if (tag == 24) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mask_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int64 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // optional int64 offset = 5;
      case 5: {
        if (tag == 40) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // optional int64 mode = 6;
      case 6: {
        if (tag == 48) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rdev;
        break;
      }

      // optional int64 rdev = 7;
      case 7: {
        if (tag == 56) {
         parse_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rdev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_uid;
        break;
      }

      // optional int64 uid = 8;
      case 8: {
        if (tag == 64) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gid;
        break;
      }

      // optional int64 gid = 9;
      case 9: {
        if (tag == 72) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_flags;
        break;
      }

      // optional int64 flags = 10;
      case 10: {
        if (tag == 80) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flags_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_frompath;
        break;
      }

      // optional string frompath = 11;
      case 11: {
        if (tag == 90) {
         parse_frompath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frompath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frompath().data(), this->frompath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.CData.frompath"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_topath;
        break;
      }

      // optional string topath = 12;
      case 12: {
        if (tag == 98) {
         parse_topath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topath().data(), this->topath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.CData.topath"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_res;
        break;
      }

      // optional int64 res = 13;
      case 13: {
        if (tag == 104) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &res_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_buf;
        break;
      }

      // optional string buf = 14;
      case 14: {
        if (tag == 114) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buf().data(), this->buf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.CData.buf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.CData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.CData)
  return false;
#undef DO_
}

void CData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.CData)
  // optional int64 call = 1;
  if (this->call() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->call(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional int64 mask = 3;
  if (this->mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mask(), output);
  }

  // optional int64 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->size(), output);
  }

  // optional int64 offset = 5;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->offset(), output);
  }

  // optional int64 mode = 6;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mode(), output);
  }

  // optional int64 rdev = 7;
  if (this->rdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->rdev(), output);
  }

  // optional int64 uid = 8;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->uid(), output);
  }

  // optional int64 gid = 9;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->gid(), output);
  }

  // optional int64 flags = 10;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->flags(), output);
  }

  // optional string frompath = 11;
  if (this->frompath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frompath().data(), this->frompath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.frompath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->frompath(), output);
  }

  // optional string topath = 12;
  if (this->topath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topath().data(), this->topath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.topath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->topath(), output);
  }

  // optional int64 res = 13;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->res(), output);
  }

  // optional string buf = 14;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.buf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->buf(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.CData)
}

::google::protobuf::uint8* CData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.CData)
  // optional int64 call = 1;
  if (this->call() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->call(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional int64 mask = 3;
  if (this->mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mask(), target);
  }

  // optional int64 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->size(), target);
  }

  // optional int64 offset = 5;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->offset(), target);
  }

  // optional int64 mode = 6;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mode(), target);
  }

  // optional int64 rdev = 7;
  if (this->rdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->rdev(), target);
  }

  // optional int64 uid = 8;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->uid(), target);
  }

  // optional int64 gid = 9;
  if (this->gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->gid(), target);
  }

  // optional int64 flags = 10;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->flags(), target);
  }

  // optional string frompath = 11;
  if (this->frompath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frompath().data(), this->frompath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.frompath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->frompath(), target);
  }

  // optional string topath = 12;
  if (this->topath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topath().data(), this->topath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.topath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->topath(), target);
  }

  // optional int64 res = 13;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->res(), target);
  }

  // optional string buf = 14;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.CData.buf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->buf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.CData)
  return target;
}

int CData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.CData)
  int total_size = 0;

  // optional int64 call = 1;
  if (this->call() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->call());
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional int64 mask = 3;
  if (this->mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mask());
  }

  // optional int64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // optional int64 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // optional int64 mode = 6;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mode());
  }

  // optional int64 rdev = 7;
  if (this->rdev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rdev());
  }

  // optional int64 uid = 8;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // optional int64 gid = 9;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gid());
  }

  // optional int64 flags = 10;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flags());
  }

  // optional string frompath = 11;
  if (this->frompath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frompath());
  }

  // optional string topath = 12;
  if (this->topath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topath());
  }

  // optional int64 res = 13;
  if (this->res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->res());
  }

  // optional string buf = 14;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buf());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.CData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.CData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.CData)
    MergeFrom(*source);
  }
}

void CData::MergeFrom(const CData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.CData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.call() != 0) {
    set_call(from.call());
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.mask() != 0) {
    set_mask(from.mask());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.rdev() != 0) {
    set_rdev(from.rdev());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.frompath().size() > 0) {

    frompath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frompath_);
  }
  if (from.topath().size() > 0) {

    topath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topath_);
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
}

void CData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.CData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CData::CopyFrom(const CData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.CData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CData::IsInitialized() const {

  return true;
}

void CData::Swap(CData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CData::InternalSwap(CData* other) {
  std::swap(call_, other->call_);
  path_.Swap(&other->path_);
  std::swap(mask_, other->mask_);
  std::swap(size_, other->size_);
  std::swap(offset_, other->offset_);
  std::swap(mode_, other->mode_);
  std::swap(rdev_, other->rdev_);
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(flags_, other->flags_);
  frompath_.Swap(&other->frompath_);
  topath_.Swap(&other->topath_);
  std::swap(res_, other->res_);
  buf_.Swap(&other->buf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CData_descriptor_;
  metadata.reflection = CData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CData

// optional int64 call = 1;
void CData::clear_call() {
  call_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::call() const {
  // @@protoc_insertion_point(field_get:nfs.CData.call)
  return call_;
}
 void CData::set_call(::google::protobuf::int64 value) {
  
  call_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.call)
}

// optional string path = 2;
void CData::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CData::path() const {
  // @@protoc_insertion_point(field_get:nfs.CData.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.CData.path)
}
 void CData::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.CData.path)
}
 void CData::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.CData.path)
}
 ::std::string* CData::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:nfs.CData.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CData::release_path() {
  // @@protoc_insertion_point(field_release:nfs.CData.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:nfs.CData.path)
}

// optional int64 mask = 3;
void CData::clear_mask() {
  mask_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::mask() const {
  // @@protoc_insertion_point(field_get:nfs.CData.mask)
  return mask_;
}
 void CData::set_mask(::google::protobuf::int64 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.mask)
}

// optional int64 size = 4;
void CData::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::size() const {
  // @@protoc_insertion_point(field_get:nfs.CData.size)
  return size_;
}
 void CData::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.size)
}

// optional int64 offset = 5;
void CData::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::offset() const {
  // @@protoc_insertion_point(field_get:nfs.CData.offset)
  return offset_;
}
 void CData::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.offset)
}

// optional int64 mode = 6;
void CData::clear_mode() {
  mode_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::mode() const {
  // @@protoc_insertion_point(field_get:nfs.CData.mode)
  return mode_;
}
 void CData::set_mode(::google::protobuf::int64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.mode)
}

// optional int64 rdev = 7;
void CData::clear_rdev() {
  rdev_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::rdev() const {
  // @@protoc_insertion_point(field_get:nfs.CData.rdev)
  return rdev_;
}
 void CData::set_rdev(::google::protobuf::int64 value) {
  
  rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.rdev)
}

// optional int64 uid = 8;
void CData::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::uid() const {
  // @@protoc_insertion_point(field_get:nfs.CData.uid)
  return uid_;
}
 void CData::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.uid)
}

// optional int64 gid = 9;
void CData::clear_gid() {
  gid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::gid() const {
  // @@protoc_insertion_point(field_get:nfs.CData.gid)
  return gid_;
}
 void CData::set_gid(::google::protobuf::int64 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.gid)
}

// optional int64 flags = 10;
void CData::clear_flags() {
  flags_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::flags() const {
  // @@protoc_insertion_point(field_get:nfs.CData.flags)
  return flags_;
}
 void CData::set_flags(::google::protobuf::int64 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.flags)
}

// optional string frompath = 11;
void CData::clear_frompath() {
  frompath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CData::frompath() const {
  // @@protoc_insertion_point(field_get:nfs.CData.frompath)
  return frompath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_frompath(const ::std::string& value) {
  
  frompath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.CData.frompath)
}
 void CData::set_frompath(const char* value) {
  
  frompath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.CData.frompath)
}
 void CData::set_frompath(const char* value, size_t size) {
  
  frompath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.CData.frompath)
}
 ::std::string* CData::mutable_frompath() {
  
  // @@protoc_insertion_point(field_mutable:nfs.CData.frompath)
  return frompath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CData::release_frompath() {
  // @@protoc_insertion_point(field_release:nfs.CData.frompath)
  
  return frompath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_allocated_frompath(::std::string* frompath) {
  if (frompath != NULL) {
    
  } else {
    
  }
  frompath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frompath);
  // @@protoc_insertion_point(field_set_allocated:nfs.CData.frompath)
}

// optional string topath = 12;
void CData::clear_topath() {
  topath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CData::topath() const {
  // @@protoc_insertion_point(field_get:nfs.CData.topath)
  return topath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_topath(const ::std::string& value) {
  
  topath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.CData.topath)
}
 void CData::set_topath(const char* value) {
  
  topath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.CData.topath)
}
 void CData::set_topath(const char* value, size_t size) {
  
  topath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.CData.topath)
}
 ::std::string* CData::mutable_topath() {
  
  // @@protoc_insertion_point(field_mutable:nfs.CData.topath)
  return topath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CData::release_topath() {
  // @@protoc_insertion_point(field_release:nfs.CData.topath)
  
  return topath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_allocated_topath(::std::string* topath) {
  if (topath != NULL) {
    
  } else {
    
  }
  topath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topath);
  // @@protoc_insertion_point(field_set_allocated:nfs.CData.topath)
}

// optional int64 res = 13;
void CData::clear_res() {
  res_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CData::res() const {
  // @@protoc_insertion_point(field_get:nfs.CData.res)
  return res_;
}
 void CData::set_res(::google::protobuf::int64 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:nfs.CData.res)
}

// optional string buf = 14;
void CData::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CData::buf() const {
  // @@protoc_insertion_point(field_get:nfs.CData.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.CData.buf)
}
 void CData::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.CData.buf)
}
 void CData::set_buf(const char* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.CData.buf)
}
 ::std::string* CData::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:nfs.CData.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CData::release_buf() {
  // @@protoc_insertion_point(field_release:nfs.CData.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CData::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:nfs.CData.buf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stat::kDevFieldNumber;
const int Stat::kInoFieldNumber;
const int Stat::kModeFieldNumber;
const int Stat::kNlinkFieldNumber;
const int Stat::kUidFieldNumber;
const int Stat::kGidFieldNumber;
const int Stat::kRdevFieldNumber;
const int Stat::kSizeFieldNumber;
const int Stat::kBlksizeFieldNumber;
const int Stat::kBlocksFieldNumber;
const int Stat::kMtimeFieldNumber;
const int Stat::kCtimeFieldNumber;
const int Stat::kAtimeFieldNumber;
const int Stat::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stat::Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.Stat)
}

void Stat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Stat::Stat(const Stat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.Stat)
}

void Stat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dev_ = GOOGLE_LONGLONG(0);
  ino_ = GOOGLE_LONGLONG(0);
  mode_ = GOOGLE_LONGLONG(0);
  nlink_ = GOOGLE_LONGLONG(0);
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = GOOGLE_LONGLONG(0);
  rdev_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
  blksize_ = GOOGLE_LONGLONG(0);
  blocks_ = GOOGLE_LONGLONG(0);
  mtime_ = GOOGLE_LONGLONG(0);
  ctime_ = GOOGLE_LONGLONG(0);
  atime_ = GOOGLE_LONGLONG(0);
  res_ = GOOGLE_LONGLONG(0);
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:nfs.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stat_descriptor_;
}

const Stat& Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_5fdata_2eproto();
  return *default_instance_;
}

Stat* Stat::default_instance_ = NULL;

Stat* Stat::New(::google::protobuf::Arena* arena) const {
  Stat* n = new Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.Stat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Stat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Stat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dev_, size_);
  ZR_(blksize_, res_);

#undef ZR_HELPER_
#undef ZR_

}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dev = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ino;
        break;
      }

      // optional int64 ino = 2;
      case 2: {
        if (tag == 16) {
         parse_ino:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ino_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int64 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nlink;
        break;
      }

      // optional int64 nlink = 4;
      case 4: {
        if (tag == 32) {
         parse_nlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nlink_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional int64 uid = 5;
      case 5: {
        if (tag == 40) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gid;
        break;
      }

      // optional int64 gid = 6;
      case 6: {
        if (tag == 48) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rdev;
        break;
      }

      // optional int64 rdev = 7;
      case 7: {
        if (tag == 56) {
         parse_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rdev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }

      // optional int64 size = 8;
      case 8: {
        if (tag == 64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blksize;
        break;
      }

      // optional int64 blksize = 9;
      case 9: {
        if (tag == 72) {
         parse_blksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blksize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_blocks;
        break;
      }

      // optional int64 blocks = 10;
      case 10: {
        if (tag == 80) {
         parse_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocks_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mtime;
        break;
      }

      // optional int64 mtime = 11;
      case 11: {
        if (tag == 88) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ctime;
        break;
      }

      // optional int64 ctime = 12;
      case 12: {
        if (tag == 96) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_atime;
        break;
      }

      // optional int64 atime = 13;
      case 13: {
        if (tag == 104) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_res;
        break;
      }

      // optional int64 res = 14;
      case 14: {
        if (tag == 112) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &res_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.Stat)
  return false;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.Stat)
  // optional int64 dev = 1;
  if (this->dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dev(), output);
  }

  // optional int64 ino = 2;
  if (this->ino() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ino(), output);
  }

  // optional int64 mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mode(), output);
  }

  // optional int64 nlink = 4;
  if (this->nlink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nlink(), output);
  }

  // optional int64 uid = 5;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->uid(), output);
  }

  // optional int64 gid = 6;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gid(), output);
  }

  // optional int64 rdev = 7;
  if (this->rdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->rdev(), output);
  }

  // optional int64 size = 8;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->size(), output);
  }

  // optional int64 blksize = 9;
  if (this->blksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->blksize(), output);
  }

  // optional int64 blocks = 10;
  if (this->blocks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->blocks(), output);
  }

  // optional int64 mtime = 11;
  if (this->mtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->mtime(), output);
  }

  // optional int64 ctime = 12;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->ctime(), output);
  }

  // optional int64 atime = 13;
  if (this->atime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->atime(), output);
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->res(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.Stat)
}

::google::protobuf::uint8* Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.Stat)
  // optional int64 dev = 1;
  if (this->dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dev(), target);
  }

  // optional int64 ino = 2;
  if (this->ino() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ino(), target);
  }

  // optional int64 mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mode(), target);
  }

  // optional int64 nlink = 4;
  if (this->nlink() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nlink(), target);
  }

  // optional int64 uid = 5;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->uid(), target);
  }

  // optional int64 gid = 6;
  if (this->gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gid(), target);
  }

  // optional int64 rdev = 7;
  if (this->rdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->rdev(), target);
  }

  // optional int64 size = 8;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->size(), target);
  }

  // optional int64 blksize = 9;
  if (this->blksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->blksize(), target);
  }

  // optional int64 blocks = 10;
  if (this->blocks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->blocks(), target);
  }

  // optional int64 mtime = 11;
  if (this->mtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->mtime(), target);
  }

  // optional int64 ctime = 12;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->ctime(), target);
  }

  // optional int64 atime = 13;
  if (this->atime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->atime(), target);
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->res(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.Stat)
  return target;
}

int Stat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.Stat)
  int total_size = 0;

  // optional int64 dev = 1;
  if (this->dev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dev());
  }

  // optional int64 ino = 2;
  if (this->ino() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ino());
  }

  // optional int64 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mode());
  }

  // optional int64 nlink = 4;
  if (this->nlink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nlink());
  }

  // optional int64 uid = 5;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // optional int64 gid = 6;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gid());
  }

  // optional int64 rdev = 7;
  if (this->rdev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rdev());
  }

  // optional int64 size = 8;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // optional int64 blksize = 9;
  if (this->blksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blksize());
  }

  // optional int64 blocks = 10;
  if (this->blocks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blocks());
  }

  // optional int64 mtime = 11;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mtime());
  }

  // optional int64 ctime = 12;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ctime());
  }

  // optional int64 atime = 13;
  if (this->atime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->atime());
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->res());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.Stat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.Stat)
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.Stat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.dev() != 0) {
    set_dev(from.dev());
  }
  if (from.ino() != 0) {
    set_ino(from.ino());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.nlink() != 0) {
    set_nlink(from.nlink());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
  if (from.rdev() != 0) {
    set_rdev(from.rdev());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.blksize() != 0) {
    set_blksize(from.blksize());
  }
  if (from.blocks() != 0) {
    set_blocks(from.blocks());
  }
  if (from.mtime() != 0) {
    set_mtime(from.mtime());
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
  if (from.atime() != 0) {
    set_atime(from.atime());
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {

  return true;
}

void Stat::Swap(Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stat::InternalSwap(Stat* other) {
  std::swap(dev_, other->dev_);
  std::swap(ino_, other->ino_);
  std::swap(mode_, other->mode_);
  std::swap(nlink_, other->nlink_);
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(rdev_, other->rdev_);
  std::swap(size_, other->size_);
  std::swap(blksize_, other->blksize_);
  std::swap(blocks_, other->blocks_);
  std::swap(mtime_, other->mtime_);
  std::swap(ctime_, other->ctime_);
  std::swap(atime_, other->atime_);
  std::swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stat_descriptor_;
  metadata.reflection = Stat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stat

// optional int64 dev = 1;
void Stat::clear_dev() {
  dev_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::dev() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.dev)
  return dev_;
}
 void Stat::set_dev(::google::protobuf::int64 value) {
  
  dev_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.dev)
}

// optional int64 ino = 2;
void Stat::clear_ino() {
  ino_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::ino() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.ino)
  return ino_;
}
 void Stat::set_ino(::google::protobuf::int64 value) {
  
  ino_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.ino)
}

// optional int64 mode = 3;
void Stat::clear_mode() {
  mode_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::mode() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.mode)
  return mode_;
}
 void Stat::set_mode(::google::protobuf::int64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.mode)
}

// optional int64 nlink = 4;
void Stat::clear_nlink() {
  nlink_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::nlink() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.nlink)
  return nlink_;
}
 void Stat::set_nlink(::google::protobuf::int64 value) {
  
  nlink_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.nlink)
}

// optional int64 uid = 5;
void Stat::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::uid() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.uid)
  return uid_;
}
 void Stat::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.uid)
}

// optional int64 gid = 6;
void Stat::clear_gid() {
  gid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::gid() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.gid)
  return gid_;
}
 void Stat::set_gid(::google::protobuf::int64 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.gid)
}

// optional int64 rdev = 7;
void Stat::clear_rdev() {
  rdev_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::rdev() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.rdev)
  return rdev_;
}
 void Stat::set_rdev(::google::protobuf::int64 value) {
  
  rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.rdev)
}

// optional int64 size = 8;
void Stat::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::size() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.size)
  return size_;
}
 void Stat::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.size)
}

// optional int64 blksize = 9;
void Stat::clear_blksize() {
  blksize_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::blksize() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.blksize)
  return blksize_;
}
 void Stat::set_blksize(::google::protobuf::int64 value) {
  
  blksize_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.blksize)
}

// optional int64 blocks = 10;
void Stat::clear_blocks() {
  blocks_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::blocks() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.blocks)
  return blocks_;
}
 void Stat::set_blocks(::google::protobuf::int64 value) {
  
  blocks_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.blocks)
}

// optional int64 mtime = 11;
void Stat::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::mtime() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.mtime)
  return mtime_;
}
 void Stat::set_mtime(::google::protobuf::int64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.mtime)
}

// optional int64 ctime = 12;
void Stat::clear_ctime() {
  ctime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::ctime() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.ctime)
  return ctime_;
}
 void Stat::set_ctime(::google::protobuf::int64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.ctime)
}

// optional int64 atime = 13;
void Stat::clear_atime() {
  atime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::atime() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.atime)
  return atime_;
}
 void Stat::set_atime(::google::protobuf::int64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.atime)
}

// optional int64 res = 14;
void Stat::clear_res() {
  res_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Stat::res() const {
  // @@protoc_insertion_point(field_get:nfs.Stat.res)
  return res_;
}
 void Stat::set_res(::google::protobuf::int64 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:nfs.Stat.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filelist::kFilenameFieldNumber;
const int Filelist::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filelist::Filelist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.Filelist)
}

void Filelist::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Filelist::Filelist(const Filelist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.Filelist)
}

void Filelist::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  res_ = GOOGLE_LONGLONG(0);
}

Filelist::~Filelist() {
  // @@protoc_insertion_point(destructor:nfs.Filelist)
  SharedDtor();
}

void Filelist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Filelist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filelist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filelist_descriptor_;
}

const Filelist& Filelist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_5fdata_2eproto();
  return *default_instance_;
}

Filelist* Filelist::default_instance_ = NULL;

Filelist* Filelist::New(::google::protobuf::Arena* arena) const {
  Filelist* n = new Filelist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Filelist::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.Filelist)
  res_ = GOOGLE_LONGLONG(0);
  filename_.Clear();
}

bool Filelist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.Filelist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string filename = 1;
      case 1: {
        if (tag == 10) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename(this->filename_size() - 1).data(),
            this->filename(this->filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.Filelist.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_filename;
        if (input->ExpectTag(112)) goto parse_res;
        break;
      }

      // optional int64 res = 14;
      case 14: {
        if (tag == 112) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &res_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.Filelist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.Filelist)
  return false;
#undef DO_
}

void Filelist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.Filelist)
  // repeated string filename = 1;
  for (int i = 0; i < this->filename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename(i).data(), this->filename(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.Filelist.filename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(i), output);
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->res(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.Filelist)
}

::google::protobuf::uint8* Filelist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.Filelist)
  // repeated string filename = 1;
  for (int i = 0; i < this->filename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename(i).data(), this->filename(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.Filelist.filename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->filename(i), target);
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->res(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.Filelist)
  return target;
}

int Filelist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.Filelist)
  int total_size = 0;

  // optional int64 res = 14;
  if (this->res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->res());
  }

  // repeated string filename = 1;
  total_size += 1 * this->filename_size();
  for (int i = 0; i < this->filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filename(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filelist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.Filelist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Filelist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Filelist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.Filelist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.Filelist)
    MergeFrom(*source);
  }
}

void Filelist::MergeFrom(const Filelist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.Filelist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  filename_.MergeFrom(from.filename_);
  if (from.res() != 0) {
    set_res(from.res());
  }
}

void Filelist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.Filelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filelist::CopyFrom(const Filelist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.Filelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filelist::IsInitialized() const {

  return true;
}

void Filelist::Swap(Filelist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filelist::InternalSwap(Filelist* other) {
  filename_.UnsafeArenaSwap(&other->filename_);
  std::swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Filelist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Filelist_descriptor_;
  metadata.reflection = Filelist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Filelist

// repeated string filename = 1;
int Filelist::filename_size() const {
  return filename_.size();
}
void Filelist::clear_filename() {
  filename_.Clear();
}
 const ::std::string& Filelist::filename(int index) const {
  // @@protoc_insertion_point(field_get:nfs.Filelist.filename)
  return filename_.Get(index);
}
 ::std::string* Filelist::mutable_filename(int index) {
  // @@protoc_insertion_point(field_mutable:nfs.Filelist.filename)
  return filename_.Mutable(index);
}
 void Filelist::set_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nfs.Filelist.filename)
  filename_.Mutable(index)->assign(value);
}
 void Filelist::set_filename(int index, const char* value) {
  filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nfs.Filelist.filename)
}
 void Filelist::set_filename(int index, const char* value, size_t size) {
  filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nfs.Filelist.filename)
}
 ::std::string* Filelist::add_filename() {
  // @@protoc_insertion_point(field_add_mutable:nfs.Filelist.filename)
  return filename_.Add();
}
 void Filelist::add_filename(const ::std::string& value) {
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nfs.Filelist.filename)
}
 void Filelist::add_filename(const char* value) {
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nfs.Filelist.filename)
}
 void Filelist::add_filename(const char* value, size_t size) {
  filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nfs.Filelist.filename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Filelist::filename() const {
  // @@protoc_insertion_point(field_list:nfs.Filelist.filename)
  return filename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Filelist::mutable_filename() {
  // @@protoc_insertion_point(field_mutable_list:nfs.Filelist.filename)
  return &filename_;
}

// optional int64 res = 14;
void Filelist::clear_res() {
  res_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Filelist::res() const {
  // @@protoc_insertion_point(field_get:nfs.Filelist.res)
  return res_;
}
 void Filelist::set_res(::google::protobuf::int64 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:nfs.Filelist.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Buffer::kBufFieldNumber;
const int Buffer::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Buffer::Buffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.Buffer)
}

void Buffer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Buffer::Buffer(const Buffer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.Buffer)
}

void Buffer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = GOOGLE_LONGLONG(0);
}

Buffer::~Buffer() {
  // @@protoc_insertion_point(destructor:nfs.Buffer)
  SharedDtor();
}

void Buffer::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Buffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Buffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Buffer_descriptor_;
}

const Buffer& Buffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_5fdata_2eproto();
  return *default_instance_;
}

Buffer* Buffer::default_instance_ = NULL;

Buffer* Buffer::New(::google::protobuf::Arena* arena) const {
  Buffer* n = new Buffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.Buffer)
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = GOOGLE_LONGLONG(0);
}

bool Buffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.Buffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string buf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buf().data(), this->buf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.Buffer.buf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_res;
        break;
      }

      // optional int64 res = 14;
      case 14: {
        if (tag == 112) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &res_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.Buffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.Buffer)
  return false;
#undef DO_
}

void Buffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.Buffer)
  // optional string buf = 1;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.Buffer.buf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->buf(), output);
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->res(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.Buffer)
}

::google::protobuf::uint8* Buffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.Buffer)
  // optional string buf = 1;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.Buffer.buf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->buf(), target);
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->res(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.Buffer)
  return target;
}

int Buffer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.Buffer)
  int total_size = 0;

  // optional string buf = 1;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buf());
  }

  // optional int64 res = 14;
  if (this->res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->res());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Buffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.Buffer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Buffer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Buffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.Buffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.Buffer)
    MergeFrom(*source);
  }
}

void Buffer::MergeFrom(const Buffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.Buffer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
}

void Buffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Buffer::CopyFrom(const Buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buffer::IsInitialized() const {

  return true;
}

void Buffer::Swap(Buffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Buffer::InternalSwap(Buffer* other) {
  buf_.Swap(&other->buf_);
  std::swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Buffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Buffer_descriptor_;
  metadata.reflection = Buffer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Buffer

// optional string buf = 1;
void Buffer::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Buffer::buf() const {
  // @@protoc_insertion_point(field_get:nfs.Buffer.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Buffer::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.Buffer.buf)
}
 void Buffer::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.Buffer.buf)
}
 void Buffer::set_buf(const char* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.Buffer.buf)
}
 ::std::string* Buffer::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:nfs.Buffer.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Buffer::release_buf() {
  // @@protoc_insertion_point(field_release:nfs.Buffer.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Buffer::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:nfs.Buffer.buf)
}

// optional int64 res = 14;
void Buffer::clear_res() {
  res_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Buffer::res() const {
  // @@protoc_insertion_point(field_get:nfs.Buffer.res)
  return res_;
}
 void Buffer::set_res(::google::protobuf::int64 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:nfs.Buffer.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.Result)
}

void Result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.Result)
}

void Result::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  res_ = GOOGLE_LONGLONG(0);
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:nfs.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_5fdata_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.Result)
  res_ = GOOGLE_LONGLONG(0);
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 res = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &res_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.Result)
  // optional int64 res = 1;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->res(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.Result)
  // optional int64 res = 1;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->res(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.Result)
  return target;
}

int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.Result)
  int total_size = 0;

  // optional int64 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->res());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.res() != 0) {
    set_res(from.res());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// optional int64 res = 1;
void Result::clear_res() {
  res_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Result::res() const {
  // @@protoc_insertion_point(field_get:nfs.Result.res)
  return res_;
}
 void Result::set_res(::google::protobuf::int64 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:nfs.Result.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nfs

// @@protoc_insertion_point(global_scope)
